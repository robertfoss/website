var searchIndex = {};
searchIndex["amethyst"] = {"doc":"Amethyst is a free and open source game engine written in idiomatic\n[Rust][rs] for building video games and interactive multimedia applications.\nThe source code is available for download on [GitHub][gh]. See the\n[online book][bk] for a complete guide to using Amethyst.","items":[[0,"engine","amethyst","Game engine sitting atop the core libraries.",null,null],[3,"Application","amethyst::engine","User-friendly facade for building games. Manages main loop.",null,null],[3,"ApplicationBuilder","","Helper builder for Applications.",null,null],[3,"StateMachine","","A simple stack-based state machine (pushdown automaton).",null,null],[3,"Config","","",null,null],[12,"context_config","","",0,null],[12,"renderer_config","","",0,null],[4,"Trans","","Types of state transitions.",null,null],[13,"None","","Continue as normal.",1,null],[13,"Pop","","Remove the active state and resume the next state on the stack or stop\nif there are none.",1,null],[13,"Push","","Pause the active state and push a new state onto the stack.",1,null],[13,"Switch","","Remove the current state on the stack and insert a different one.",1,null],[13,"Quit","","Stop and remove all states and shut down the engine.",1,null],[11,"new","","Creates a new Application with the given initial game state, planner, and context.",2,{"inputs":[{"name":"t"},{"name":"planner"},{"name":"context"}],"output":{"name":"application"}}],[11,"build","","Build a new Application using builder pattern.",2,{"inputs":[{"name":"t"},{"name":"context"}],"output":{"name":"applicationbuilder"}}],[11,"run","","Starts the application and manages the game loop.",2,null],[11,"new","","",3,{"inputs":[{"name":"t"},{"name":"context"}],"output":{"name":"applicationbuilder"}}],[11,"register","","",3,null],[11,"with","","",3,null],[11,"done","","",3,null],[11,"new","","",4,{"inputs":[{"name":"t"},{"name":"planner"}],"output":{"name":"statemachine"}}],[11,"is_running","","Checks whether the state machine is running.",4,null],[11,"run_processors","","Runs processors if the state machine is running.",4,null],[11,"start","","Initializes the state machine.\n# Panics\nPanics if no states are present in the stack.",4,null],[11,"handle_events","","Passes a vector of events to the active state to handle.",4,null],[11,"fixed_update","","Updates the currently active state at a steady, fixed interval.",4,null],[11,"update","","Updates the currently active state immediately.",4,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"to_string","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_yaml","","",0,{"inputs":[{"name":"configmeta"},{"name":"yaml"}],"output":{"name":"result"}}],[11,"to_yaml","","",0,null],[11,"set_meta","","",0,null],[11,"meta","","",0,null],[11,"write_file","","",0,null],[8,"State","","A trait which defines game states that can be used by the state machine.",null,null],[11,"on_start","","Executed when the game state begins.",5,null],[11,"on_stop","","Executed when the game state exits.",5,null],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",5,null],[11,"on_resume","","Executed when the application returns to this game state once again.",5,null],[11,"handle_events","","Executed on every frame before updating, for use in reacting to events.",5,null],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second\nby default).",5,null],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",5,null],[0,"processors","amethyst","Default processors.",null,null],[0,"rendering","amethyst::processors","Default rendering processor types.",null,null],[3,"RendererConfig","amethyst::processors::rendering","A config required to create a rendering processor.",null,null],[12,"pipeline","","",6,null],[12,"shading","","",6,null],[12,"clear_color","","",6,null],[3,"RenderingProcessor","","A rendering processor struct.",null,null],[3,"Renderable","","Entities with this component are rendered\nby the `RenderingProcessor`, modifying the `transform` field\nwould affect the `transform` of the `Fragment` that is\nbeing rendered.",null,null],[3,"Light","","A `Light` component.\nAll changes in the `light` field will be\napplied to the associated `renderer::Light` in the frame.",null,null],[12,"light","","",7,null],[3,"Camera","","A `Camera` component.\nIf this `Camera` is active then all changes in this component&#39;s fields\nwill be applied to the camera that is being used to render the scene.",null,null],[12,"projection","","",8,null],[12,"eye","","",8,null],[12,"target","","",8,null],[12,"up","","",8,null],[4,"Projection","","A projection enum which is required to create a `Camera` component.",null,null],[13,"Perspective","","",9,null],[12,"fov","amethyst::processors::rendering::Projection","",9,null],[12,"aspect","","",9,null],[12,"near","","",9,null],[12,"far","","",9,null],[13,"Orthographic","amethyst::processors::rendering","",9,null],[12,"left","amethyst::processors::rendering::Projection","",9,null],[12,"right","","",9,null],[12,"bottom","","",9,null],[12,"top","","",9,null],[12,"near","","",9,null],[12,"far","","",9,null],[11,"clone","amethyst::processors::rendering","",6,null],[11,"fmt","","",6,null],[11,"to_string","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"from_yaml","","",6,{"inputs":[{"name":"configmeta"},{"name":"yaml"}],"output":{"name":"result"}}],[11,"to_yaml","","",6,null],[11,"set_meta","","",6,null],[11,"meta","","",6,null],[11,"write_file","","",6,null],[11,"new","","",10,{"inputs":[{"name":"rendererconfig"},{"name":"context"}],"output":{"name":"renderingprocessor"}}],[11,"run","","",10,null],[11,"clone","","",11,null],[11,"new","","Create a new Renderable component from names of assets loaded by context.asset_manager.",11,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"renderable"}}],[11,"clone","","",7,null],[11,"new","","",7,{"inputs":[{"name":"light"}],"output":{"name":"light"}}],[11,"clone","","",9,null],[11,"clone","","",8,null],[11,"new","","Create a new `Camera` component from all the parameters\nfor projection and view transformations.",8,null],[11,"activate","","",8,null],[0,"transform","amethyst::processors","Scene graph processor and types",null,null],[3,"LocalTransform","amethyst::processors::transform","Local position, rotation, and scale (from parent if it exists).",null,null],[3,"Transform","","Absolute transformation (transformed from origin).\nUsed for rendering position and orientation.",null,null],[12,"0","","",12,null],[3,"Init","","Initialization flag.\nAdded to entity with a `LocalTransform` component after the first update.",null,null],[3,"Child","","Component for defining a parent entity.",null,null],[3,"TransformProcessor","","Transformation processor.",null,null],[11,"fmt","","",13,null],[11,"translation","","",13,null],[11,"rotation","","",13,null],[11,"scale","","",13,null],[11,"set_translation","","",13,null],[11,"set_rotation","","",13,null],[11,"set_scale","","",13,null],[11,"set_translation_index","","Set a specific part of the translation/position without modifying the others\n(must be an index less than 3).",13,null],[11,"set_rotation_index","","Set a specific part of the rotation quaternion without modifying the others\n(must be an index less than 4).",13,null],[11,"set_scale_index","","Set a specific part of the scale without modifying the others\n(must be an index less than 3).",13,null],[11,"flag","","Flags the current transform for re-computation.",13,null],[11,"is_dirty","","Returns whether or not the current transform is flagged for re-computation or &quot;dirty&quot;.",13,null],[11,"matrix","","Returns the local object matrix for the transform.",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",12,null],[11,"into","","",12,null],[11,"default","","",14,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",14,null],[11,"new","","",15,{"inputs":[{"name":"entity"}],"output":{"name":"child"}}],[11,"parent","","",15,null],[11,"set_parent","","",15,null],[11,"flag","","Flag that parent has been changed",15,null],[11,"is_dirty","","Returns whether the parent was changed.",15,null],[11,"new","","",16,{"inputs":[],"output":{"name":"transformprocessor"}}],[11,"run","","",16,null],[11,"on_start","amethyst::engine","Executed when the game state begins.",5,null],[11,"on_stop","","Executed when the game state exits.",5,null],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",5,null],[11,"on_resume","","Executed when the application returns to this game state once again.",5,null],[11,"handle_events","","Executed on every frame before updating, for use in reacting to events.",5,null],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second\nby default).",5,null],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",5,null]],"paths":[[3,"Config"],[4,"Trans"],[3,"Application"],[3,"ApplicationBuilder"],[3,"StateMachine"],[8,"State"],[3,"RendererConfig"],[3,"Light"],[3,"Camera"],[4,"Projection"],[3,"RenderingProcessor"],[3,"Renderable"],[3,"Transform"],[3,"LocalTransform"],[3,"Init"],[3,"Child"],[3,"TransformProcessor"]]};
searchIndex["amethyst_context"] = {"doc":"A way to manage engine resources.","items":[[3,"ContextConfig","amethyst_context","Contains configs for resources provided by `Context`",null,null],[12,"display_config","","",0,null],[3,"Context","","Contains all engine resources which must be shared by multiple parties, in particular `Renderer` and `Broadcaster`.\nAn `Arc&lt;Mutex&lt;Context&gt;&gt;` is passed to every `Processor` run by the engine and a `&amp;mut Context` is passed to every `State`\nmethod.",null,null],[12,"renderer","","",1,null],[12,"asset_manager","","",1,null],[12,"input_handler","","",1,null],[12,"broadcaster","","",1,null],[12,"delta_time","","",1,null],[12,"fixed_step","","",1,null],[12,"last_fixed_update","","",1,null],[0,"video_context","","This module contains `VideoContext` enum which holds all the resources related to video subsystem.",null,null],[3,"DisplayConfig","amethyst_context::video_context","Contains display config,\nit is required to create a `VideoContext`",null,null],[12,"title","","",2,null],[12,"fullscreen","","",2,null],[12,"dimensions","","",2,null],[12,"min_dimensions","","",2,null],[12,"max_dimensions","","",2,null],[12,"vsync","","",2,null],[12,"multisampling","","",2,null],[12,"visibility","","",2,null],[12,"backend","","",2,null],[4,"VideoContext","","Contains all resources related to video subsystem,\nvariants of this enum represent available backends",null,null],[13,"OpenGL","","Context for a video backend that uses glutin and OpenGL",3,null],[12,"window","amethyst_context::video_context::VideoContext","",3,null],[12,"device","","",3,null],[12,"renderer","","",3,null],[12,"frame","","",3,null],[13,"Null","amethyst_context::video_context","",3,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"to_string","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"from_yaml","","",2,{"inputs":[{"name":"configmeta"},{"name":"yaml"}],"output":{"name":"result"}}],[11,"to_yaml","","",2,null],[11,"set_meta","","",2,null],[11,"meta","","",2,null],[11,"write_file","","",2,null],[0,"broadcaster","amethyst_context","This module contains `Broadcaster` struct\nwhich allows publishing and polling specs\nentities. It is primarily used for event\nhandling.",null,null],[3,"Broadcaster","amethyst_context::broadcaster","Allows publishing entities",null,null],[11,"new","","Create new `Broadcaster`",4,{"inputs":[],"output":{"name":"broadcaster"}}],[11,"register","","Add a custom `Component` with which\nentities can be built and published\nusing `Broadcaster::publish()`",4,null],[11,"publish","","Build and publish an entity,\nusing `EntityBuilder` syntax",4,null],[11,"poll","","Return a vector containing clones of all published entities",4,null],[11,"read","","Access a component storage",4,null],[11,"clean","","Delete all published entities",4,null],[0,"timing","amethyst_context","Utilities for working with time.",null,null],[4,"Stopwatch","amethyst_context::timing","Useful utility for accurately measuring elapsed time.",null,null],[13,"Waiting","","",5,null],[13,"Started","","",5,null],[13,"Ended","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"stopwatch"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"stopwatch"}}],[11,"elapsed","","Retrieves the elapsed time.",5,null],[11,"restart","","Stops, resets, and starts the stopwatch again.",5,null],[11,"start","","Starts, or resumes, measuring elapsed time. If the stopwatch has been\nstarted and stopped before, the new results are compounded onto the\nexisting elapsed time value.",5,null],[11,"stop","","Stops measuring elapsed time.",5,null],[11,"reset","","Clears the current elapsed time value.",5,null],[0,"event","amethyst_context","This module contains the `EngineEvent` component and reexports glutin event types.",null,null],[4,"Event","amethyst_context::event","",null,null],[13,"Resized","","The size of the window has changed.",6,null],[13,"Moved","","The position of the window has changed.",6,null],[13,"Closed","","The window has been closed.",6,null],[13,"DroppedFile","","A file has been dropped into the window.",6,null],[13,"ReceivedCharacter","","The window received a unicode character.",6,null],[13,"Focused","","The window gained or lost focus.",6,null],[13,"KeyboardInput","","An event from the keyboard has been received.",6,null],[13,"MouseMoved","","The cursor has moved on the window.",6,null],[13,"MouseWheel","","A mouse wheel movement or touchpad scroll occurred.",6,null],[13,"MouseInput","","An event from the mouse has been received.",6,null],[13,"TouchpadPressure","","Touchpad pressure event.",6,null],[13,"Awakened","","The event loop was woken up by another thread.",6,null],[13,"Refresh","","The window needs to be redrawn.",6,null],[13,"Suspended","","App has been suspended or resumed.",6,null],[13,"Touch","","Touch event has been received",6,null],[4,"ElementState","","",null,null],[13,"Pressed","","",7,null],[13,"Released","","",7,null],[6,"ScanCode","","",null,null],[4,"VirtualKeyCode","","",null,null],[13,"Key1","","The &#39;1&#39; key over the letters.",8,null],[13,"Key2","","The &#39;2&#39; key over the letters.",8,null],[13,"Key3","","The &#39;3&#39; key over the letters.",8,null],[13,"Key4","","The &#39;4&#39; key over the letters.",8,null],[13,"Key5","","The &#39;5&#39; key over the letters.",8,null],[13,"Key6","","The &#39;6&#39; key over the letters.",8,null],[13,"Key7","","The &#39;7&#39; key over the letters.",8,null],[13,"Key8","","The &#39;8&#39; key over the letters.",8,null],[13,"Key9","","The &#39;9&#39; key over the letters.",8,null],[13,"Key0","","The &#39;0&#39; key over the &#39;O&#39; and &#39;P&#39; keys.",8,null],[13,"A","","",8,null],[13,"B","","",8,null],[13,"C","","",8,null],[13,"D","","",8,null],[13,"E","","",8,null],[13,"F","","",8,null],[13,"G","","",8,null],[13,"H","","",8,null],[13,"I","","",8,null],[13,"J","","",8,null],[13,"K","","",8,null],[13,"L","","",8,null],[13,"M","","",8,null],[13,"N","","",8,null],[13,"O","","",8,null],[13,"P","","",8,null],[13,"Q","","",8,null],[13,"R","","",8,null],[13,"S","","",8,null],[13,"T","","",8,null],[13,"U","","",8,null],[13,"V","","",8,null],[13,"W","","",8,null],[13,"X","","",8,null],[13,"Y","","",8,null],[13,"Z","","",8,null],[13,"Escape","","The Escape key, next to F1.",8,null],[13,"F1","","",8,null],[13,"F2","","",8,null],[13,"F3","","",8,null],[13,"F4","","",8,null],[13,"F5","","",8,null],[13,"F6","","",8,null],[13,"F7","","",8,null],[13,"F8","","",8,null],[13,"F9","","",8,null],[13,"F10","","",8,null],[13,"F11","","",8,null],[13,"F12","","",8,null],[13,"F13","","",8,null],[13,"F14","","",8,null],[13,"F15","","",8,null],[13,"Snapshot","","Print Screen/SysRq.",8,null],[13,"Scroll","","Scroll Lock.",8,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",8,null],[13,"Insert","","`Insert`, next to Backspace.",8,null],[13,"Home","","",8,null],[13,"Delete","","",8,null],[13,"End","","",8,null],[13,"PageDown","","",8,null],[13,"PageUp","","",8,null],[13,"Left","","",8,null],[13,"Up","","",8,null],[13,"Right","","",8,null],[13,"Down","","",8,null],[13,"Back","","The Backspace key, right over Enter.",8,null],[13,"Return","","The Enter key.",8,null],[13,"Space","","The space bar.",8,null],[13,"Numlock","","",8,null],[13,"Numpad0","","",8,null],[13,"Numpad1","","",8,null],[13,"Numpad2","","",8,null],[13,"Numpad3","","",8,null],[13,"Numpad4","","",8,null],[13,"Numpad5","","",8,null],[13,"Numpad6","","",8,null],[13,"Numpad7","","",8,null],[13,"Numpad8","","",8,null],[13,"Numpad9","","",8,null],[13,"AbntC1","","",8,null],[13,"AbntC2","","",8,null],[13,"Add","","",8,null],[13,"Apostrophe","","",8,null],[13,"Apps","","",8,null],[13,"At","","",8,null],[13,"Ax","","",8,null],[13,"Backslash","","",8,null],[13,"Calculator","","",8,null],[13,"Capital","","",8,null],[13,"Colon","","",8,null],[13,"Comma","","",8,null],[13,"Convert","","",8,null],[13,"Decimal","","",8,null],[13,"Divide","","",8,null],[13,"Equals","","",8,null],[13,"Grave","","",8,null],[13,"Kana","","",8,null],[13,"Kanji","","",8,null],[13,"LAlt","","",8,null],[13,"LBracket","","",8,null],[13,"LControl","","",8,null],[13,"LMenu","","",8,null],[13,"LShift","","",8,null],[13,"LWin","","",8,null],[13,"Mail","","",8,null],[13,"MediaSelect","","",8,null],[13,"MediaStop","","",8,null],[13,"Minus","","",8,null],[13,"Multiply","","",8,null],[13,"Mute","","",8,null],[13,"MyComputer","","",8,null],[13,"NavigateForward","","",8,null],[13,"NavigateBackward","","",8,null],[13,"NextTrack","","",8,null],[13,"NoConvert","","",8,null],[13,"NumpadComma","","",8,null],[13,"NumpadEnter","","",8,null],[13,"NumpadEquals","","",8,null],[13,"OEM102","","",8,null],[13,"Period","","",8,null],[13,"PlayPause","","",8,null],[13,"Power","","",8,null],[13,"PrevTrack","","",8,null],[13,"RAlt","","",8,null],[13,"RBracket","","",8,null],[13,"RControl","","",8,null],[13,"RMenu","","",8,null],[13,"RShift","","",8,null],[13,"RWin","","",8,null],[13,"Semicolon","","",8,null],[13,"Slash","","",8,null],[13,"Sleep","","",8,null],[13,"Stop","","",8,null],[13,"Subtract","","",8,null],[13,"Sysrq","","",8,null],[13,"Tab","","",8,null],[13,"Underline","","",8,null],[13,"Unlabeled","","",8,null],[13,"VolumeDown","","",8,null],[13,"VolumeUp","","",8,null],[13,"Wake","","",8,null],[13,"WebBack","","",8,null],[13,"WebFavorites","","",8,null],[13,"WebForward","","",8,null],[13,"WebHome","","",8,null],[13,"WebRefresh","","",8,null],[13,"WebSearch","","",8,null],[13,"WebStop","","",8,null],[13,"Yen","","",8,null],[4,"MouseScrollDelta","","",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal\nand vertical directions.",9,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and\nvertical direction.",9,null],[4,"TouchPhase","","",null,null],[13,"Started","","",10,null],[13,"Moved","","",10,null],[13,"Ended","","",10,null],[13,"Cancelled","","",10,null],[4,"MouseButton","","",null,null],[13,"Left","","",11,null],[13,"Right","","",11,null],[13,"Middle","","",11,null],[13,"Other","","",11,null],[3,"Touch","","Represents touch event",null,null],[12,"phase","","",12,null],[12,"location","","",12,null],[12,"id","","unique identifier of a finger.",12,null],[3,"EngineEvent","","Represents an engine generated event,\nit can be attached to entities\nthat are published by `Broadcaster`.\nCurrently it is just a wraper around\n`glutin::Event`.",null,null],[12,"payload","","",13,null],[11,"new","","Create an EnginEvent from a glutin::Event",13,{"inputs":[{"name":"event"}],"output":{"name":"engineevent"}}],[0,"renderer","amethyst_context","This module provides a frontend for\n`amethyst_renderer`.",null,null],[3,"Renderer","amethyst_context::renderer","A wraper around `VideoContext` required to\nhide all platform specific code from the user.",null,null],[3,"Fragment","","A wraper around `Fragment` required to\nhide all platform specific code from the user.",null,null],[12,"fragment_impl","","",14,null],[4,"FragmentImpl","","An enum with variants representing concrete\n`Fragment` types compatible with different backends.",null,null],[13,"OpenGL","","",15,null],[12,"fragment","amethyst_context::renderer::FragmentImpl","",15,null],[13,"Null","amethyst_context::renderer","",15,null],[11,"new","","Create a new `Renderer` from `DisplayConfig`.",16,{"inputs":[{"name":"videocontext"}],"output":{"name":"renderer"}}],[11,"set_pipeline","","Set the rendering pipeline to be used.",16,null],[11,"add_target","","Add a rendering `Target`.",16,null],[11,"delete_target","","Delete a rendering `Target`.",16,null],[11,"add_scene","","Add an empty `Scene`.",16,null],[11,"delete_scene","","Delete a `Scene`.",16,null],[11,"add_fragment","","Add a `Fragment` to the scene with name `scene_name`.\nReturn the index of the added `Fragment`.",16,null],[11,"mut_fragment_transform","","Get a mutable reference to the transform field of `Fragment` with index `idx`\nin scene `scene_name`.",16,null],[11,"delete_fragment","","Delete `Fragment` with index `idx` in scene `scene_name`.",16,null],[11,"num_fragments","","",16,null],[11,"add_light","","Add a `Light` to the scene `scene_name`.\nReturn the index of the added `Light`.",16,null],[11,"mut_light","","Lookup `Light` in scene `scene_name` by index.",16,null],[11,"delete_light","","Delete `Light` with index `idx` in scene `scene_name`.",16,null],[11,"num_lights","","",16,null],[11,"add_camera","","Add a `Camera`.",16,null],[11,"mut_camera","","Lookup a `Camera` by name.",16,null],[11,"delete_camera","","Delete a `Camera`.",16,null],[11,"get_dimensions","","",16,null],[11,"mut_video_context","","Get a mutable reference to `VideoContext`.",16,null],[11,"submit","","Submit the `Frame` to `amethyst_renderer::Renderer`.",16,null],[0,"asset_manager","amethyst_context","This module provides an asset manager\nwhich loads and provides access to assets,\nsuch as `Texture`s, `Mesh`es, and `Fragment`s.",null,null],[4,"Kind","amethyst_context::asset_manager","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",17,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels\nin a different row are not sampled.",17,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",17,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in\na different depth level are not sampled.",17,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",17,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",17,null],[13,"CubeArray","","An array of Cube textures.",17,null],[3,"Asset","","Wrapper type for actual asset data",null,null],[12,"0","","",18,null],[3,"Assets","","Internal assets handler which takes care of storing and loading assets.",null,null],[3,"AssetManager","","Asset manager which handles assets and loaders.",null,null],[3,"TextureLoadData","","A struct for creating a new texture from raw data",null,null],[12,"kind","","",19,null],[12,"raw","","",19,null],[3,"Mesh","","A wraper around `Buffer` and `Slice` required to\nhide all platform specific code from the user.",null,null],[12,"mesh_impl","","",20,null],[3,"Texture","","A wraper around `Texture` required to\nhide all platform specific code from the user.",null,null],[3,"DirectoryStore","","Asset store representing a file directory.",null,null],[4,"FactoryImpl","","An enum with variants representing concrete\n`Factory` types compatible with different backends.",null,null],[13,"OpenGL","","",21,null],[12,"factory","amethyst_context::asset_manager::FactoryImpl","",21,null],[13,"Null","amethyst_context::asset_manager","",21,null],[4,"MeshImpl","","An enum with variants representing concrete\n`Mesh` types compatible with different backends.",null,null],[13,"OpenGL","","",22,null],[12,"buffer","amethyst_context::asset_manager::MeshImpl","",22,null],[12,"slice","","",22,null],[13,"Null","amethyst_context::asset_manager","",22,null],[4,"TextureImpl","","An enum with variants representing concrete\n`Texture` types compatible with different backends.",null,null],[13,"OpenGL","","",23,null],[12,"texture","amethyst_context::asset_manager::TextureImpl","",23,null],[13,"Null","amethyst_context::asset_manager","",23,null],[6,"AssetId","","Id for directly accessing assets in the manager",null,null],[8,"AssetLoaderRaw","","A trait for generating intermdiate data for loading from raw data",null,null],[10,"from_raw","","",24,null],[8,"AssetLoader","","A trait for loading assets from arbitrary data",null,null],[10,"from_data","","",25,{"inputs":[{"name":"assets"},{"name":"self"}],"output":{"name":"option"}}],[8,"AssetStore","","A trait for asset stores which are permanent storages for assets",null,null],[10,"has_asset","","",26,null],[10,"load_asset","","",26,null],[8,"AssetReadStorage","","",null,null],[10,"read","","",27,null],[11,"add_loader","","Add loader resource to the manager",28,null],[11,"get_loader","","Returns stored loader resource",28,null],[11,"get_loader_mut","","",28,null],[11,"register_asset","","Register a new asset type",28,null],[11,"id_from_name","","Retrieve the `AssetId` from the asset name",28,null],[11,"read_assets","","Read the storage of all assets for a certain type",28,null],[11,"load_asset_from_data","","Load an asset from data",28,null],[11,"new","","Create a new asset manager",29,{"inputs":[],"output":{"name":"assetmanager"}}],[11,"register_loader","","Register a new loading method for a specific asset data type",29,null],[11,"register_store","","Register an asset store",29,null],[11,"load_asset_from_raw","","Load an asset from raw data\n# Panics\nPanics if the asset type isn&#39;t registered",29,null],[11,"load_asset","","Load an asset from the asset stores",29,null],[11,"deref","","",29,null],[11,"deref_mut","","",29,null],[11,"from_data","","# Panics\nPanics if factory isn&#39;t registered as loader.",19,{"inputs":[{"name":"assets"},{"name":"textureloaddata"}],"output":{"name":"option"}}],[11,"gen_sphere","","Generate and load a sphere mesh using the number of vertices accross the equator (u)\nand the number of vertices from pole to pole (v).",29,null],[11,"gen_cube","","Generate and load a cube mesh.",29,null],[11,"gen_rectangle","","Generate and load a rectangle mesh in XY plane with given `width` and `height`.",29,null],[11,"create_constant_texture","","Create a constant solid color `Texture` from a specified color.",29,null],[11,"get_fragment","","Construct and return a `Fragment` from previously loaded mesh, ka and kd textures and a transform matrix.\n# Panics\nPanics if factory isn&#39;t registered as loader.",29,null],[11,"clone","","",22,null],[11,"clone","","",20,null],[11,"clone","","",23,null],[11,"clone","","",30,null],[11,"new","","",31,{"inputs":[{"name":"p"}],"output":{"name":"directorystore"}}],[11,"has_asset","","",31,null],[11,"load_asset","","",31,null],[0,"input","amethyst_context","The input handler for the game engine",null,null],[3,"InputHandler","amethyst_context::input","",null,null],[11,"new","","Create a new InputHandler",32,{"inputs":[],"output":{"name":"inputhandler"}}],[11,"update","","Update the input handler with new engine events",32,null],[11,"key_down","","Check if `key` is currently pressed",32,null],[11,"clone","amethyst_context","",0,null],[11,"fmt","","",0,null],[11,"to_string","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_yaml","","",0,{"inputs":[{"name":"configmeta"},{"name":"yaml"}],"output":{"name":"result"}}],[11,"to_yaml","","",0,null],[11,"set_meta","","",0,null],[11,"meta","","",0,null],[11,"write_file","","",0,null],[11,"new","","Create a `Context` configured according to `ContextConfig`",1,{"inputs":[{"name":"contextconfig"}],"output":{"name":"context"}}],[11,"poll_engine_events","","Return a vector containing all engine events\nthat have occured since the last call of this method",1,null],[11,"eq","amethyst_context::asset_manager","",17,null],[11,"ne","","",17,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"cmp","","",17,null],[11,"hash","","",17,null],[11,"partial_cmp","","",17,null],[11,"lt","","",17,null],[11,"le","","",17,null],[11,"gt","","",17,null],[11,"ge","","",17,null],[11,"clone","amethyst_context::event","",6,null],[11,"clone","","",10,null],[11,"clone","","",12,null],[11,"clone","","",7,null],[11,"clone","","",11,null],[11,"clone","","",9,null],[11,"clone","","",8,null],[11,"hash","","",10,null],[11,"hash","","",7,null],[11,"hash","","",11,null],[11,"hash","","",8,null],[11,"eq","","",10,null],[11,"eq","","",7,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"eq","","",8,null],[11,"fmt","","",6,null],[11,"fmt","","",10,null],[11,"fmt","","",12,null],[11,"fmt","","",7,null],[11,"fmt","","",11,null],[11,"fmt","","",9,null],[11,"fmt","","",8,null],[11,"get_dimensions","amethyst_context::asset_manager","Get texture dimensions, with 0 values where not applicable.",17,null],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",17,null],[11,"get_num_levels","","Count the number of mipmap levels.",17,null],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",17,null],[11,"is_cube","","Check if it&#39;s one of the cube kinds.",17,null]],"paths":[[3,"ContextConfig"],[3,"Context"],[3,"DisplayConfig"],[4,"VideoContext"],[3,"Broadcaster"],[4,"Stopwatch"],[4,"Event"],[4,"ElementState"],[4,"VirtualKeyCode"],[4,"MouseScrollDelta"],[4,"TouchPhase"],[4,"MouseButton"],[3,"Touch"],[3,"EngineEvent"],[3,"Fragment"],[4,"FragmentImpl"],[3,"Renderer"],[4,"Kind"],[3,"Asset"],[3,"TextureLoadData"],[3,"Mesh"],[4,"FactoryImpl"],[4,"MeshImpl"],[4,"TextureImpl"],[8,"AssetLoaderRaw"],[8,"AssetLoader"],[8,"AssetStore"],[8,"AssetReadStorage"],[3,"Assets"],[3,"AssetManager"],[3,"Texture"],[3,"DirectoryStore"],[3,"InputHandler"]]};
searchIndex["amethyst_renderer"] = {"doc":"High-level rendering engine with multiple backends.","items":[[3,"Renderer","amethyst_renderer","A Renderer manages passes and the execution of the passes\nover the targets. It only contains the passes, all other\ndata is contained in the `Frame`",null,null],[3,"VertexPosNormal","","",null,null],[12,"pos","","",0,null],[12,"normal","","",0,null],[12,"tex_coord","","",0,null],[3,"ConstantColorTexture","","holds a 1x1 texture that can be used to store constant colors",null,null],[3,"Fragment","","A fragment is the most basic drawable element",null,null],[12,"transform","","The transform matrix to apply to the matrix, this\nis sometimes refereed to as the model matrix",1,null],[12,"buffer","","The vertex buffer",1,null],[12,"slice","","A slice of the above vertex buffer",1,null],[12,"ka","","ambient color",1,null],[12,"kd","","diffuse color",1,null],[3,"Light","","A basic light",null,null],[12,"center","","The XYZ coordinate of the light",2,null],[12,"radius","","How big the light is radius, lighting\npasses are not required to render the light\nbeyond this radius",2,null],[12,"color","","The color of light emitted",2,null],[12,"propagation_constant","","constant, propagation means no falloff of the light\nemission from distance. Useful for the sun.",2,null],[12,"propagation_linear","","linear level drops",2,null],[12,"propagation_r_square","","cubic light level drop",2,null],[3,"Scene","","A scene is a collection of fragments and\nlights that make up the scene.",null,null],[12,"fragments","","A list of fragments",3,null],[12,"lights","","A list of lights",3,null],[3,"Camera","","Contains the transforms for a Camera",null,null],[12,"projection","","A projection matrix",4,null],[12,"view","","A view matrix",4,null],[3,"Layer","","A layer is comprised of a Render target and\na list of passes",null,null],[12,"target","","The render target, looked up  by name during the Frame\nsubmission.",5,null],[12,"passes","","A list of passes to be executed in order to build\nup the target with the scene&#39;s data.",5,null],[3,"Frame","","The render job submission",null,null],[12,"layers","","the layers to be processed",6,null],[12,"targets","","collection of render targets. A target may be\na source or a sink for a `Pass`",6,null],[12,"scenes","","Collection of scenes, having multiple scenes\nallows for selection of different fragments\nby different passes",6,null],[12,"cameras","","Collection of Cameras owned by the scene",6,null],[4,"Texture","","",null,null],[13,"Constant","","",7,null],[13,"Texture","","",7,null],[0,"target","","Contains the included Render Targets",null,null],[3,"ColorBuffer","amethyst_renderer::target","A simple output containing both a Color and a Depth target",null,null],[12,"color","","The color render target",8,null],[12,"output_depth","","The depth buffer",8,null],[3,"GeometryBuffer","","A geometry buffer is used in a deferred pipeline",null,null],[12,"normal","","Contains the Normals as a f32x4",9,null],[12,"ka","","Contains the ambient color",9,null],[12,"kd","","Contains the diffuse color",9,null],[12,"depth","","Contains the depth buffer",9,null],[12,"texture_normal","","The normal buffer as a texture",9,null],[12,"texture_ka","","the ambient color as texture",9,null],[12,"texture_kd","","the diffuse color as a texture",9,null],[12,"texture_depth","","the depth buffer as a texture",9,null],[6,"ColorFormat","","Placeholder Color format",null,null],[6,"DepthFormat","","Placeholder Depth Format",null,null],[8,"Target","","A Target or a RenderTarget is any object that\ncan be the target of a Layer This is normally\na framebuffer",null,null],[11,"is","","Returns true if the boxed type is the same as `T`",10,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",10,null],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",10,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",10,null],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",10,null],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn&#39;t.",10,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",10,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"new","","Create a new GeometryBuffer with the supplied factory\nthe buffer will be allocated to the supplied width and height",9,null],[0,"pass","amethyst_renderer","Contains the included Passes",null,null],[3,"Clear","amethyst_renderer::pass","Clear the frame buffer",null,null],[12,"color","","the color to clear with",11,null],[3,"Wireframe","","Render the scene as a wireframe",null,null],[12,"camera","","The Camera to use",12,null],[12,"scene","","The scene to use",12,null],[3,"DrawFlat","","Render into the target without any shading applied",null,null],[12,"camera","","The Camera to use",13,null],[12,"scene","","The scene to use",13,null],[3,"DepthPass","","Render only the depth layer leaving\nall other Gbuffer layers unchanged",null,null],[12,"camera","","The Camera to use",14,null],[12,"scene","","The scene to use",14,null],[3,"DrawShaded","","Render into the target without a standard\nambient/diffuse shading",null,null],[12,"camera","","The Camera to use",15,null],[12,"scene","","The scene to use",15,null],[3,"BlitLayer","","Blit a layer of the gbuffer into the target",null,null],[12,"gbuffer","","the gbuffer to blit from",16,null],[12,"layer","","the layer of the buffer to blit from\none of ka, kd or normal",16,null],[3,"Lighting","","Do a lighting pass",null,null],[12,"camera","","The Camera to use",17,null],[12,"gbuffer","","The gbuffer to source the data",17,null],[12,"scene","","the scene to get the lights from",17,null],[0,"forward","","",null,null],[3,"PointLight","amethyst_renderer::pass::forward","",null,null],[12,"propagation","","",18,null],[12,"center","","",18,null],[12,"color","","",18,null],[3,"VertexArgs","","",null,null],[12,"proj","","",19,null],[12,"view","","",19,null],[12,"model","","",19,null],[3,"FragmentArgs","","",null,null],[12,"light_count","","",20,null],[3,"Clear","","",null,null],[3,"DrawFlat","","",null,null],[3,"DrawShaded","","",null,null],[3,"Wireframe","","",null,null],[0,"flat","","",null,null],[3,"Data","amethyst_renderer::pass::forward::flat","",null,null],[12,"vbuf","","",21,null],[12,"vertex_args","","",21,null],[12,"fragment_args","","",21,null],[12,"out_ka","","",21,null],[12,"out_depth","","",21,null],[12,"ka","","",21,null],[12,"kd","","",21,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",22,null],[12,"vertex_args","","",22,null],[12,"fragment_args","","",22,null],[12,"out_ka","","",22,null],[12,"out_depth","","",22,null],[12,"ka","","",22,null],[12,"kd","","",22,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"link_to","","",22,null],[11,"bake_to","","",21,null],[0,"shaded","amethyst_renderer::pass::forward","",null,null],[3,"Data","amethyst_renderer::pass::forward::shaded","",null,null],[12,"vbuf","","",23,null],[12,"vertex_args","","",23,null],[12,"fragment_args","","",23,null],[12,"lights","","",23,null],[12,"out_ka","","",23,null],[12,"out_depth","","",23,null],[12,"ka","","",23,null],[12,"kd","","",23,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",24,null],[12,"vertex_args","","",24,null],[12,"fragment_args","","",24,null],[12,"lights","","",24,null],[12,"out_ka","","",24,null],[12,"out_depth","","",24,null],[12,"ka","","",24,null],[12,"kd","","",24,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"link_to","","",24,null],[11,"bake_to","","",23,null],[0,"wireframe","amethyst_renderer::pass::forward","",null,null],[3,"Data","amethyst_renderer::pass::forward::wireframe","",null,null],[12,"vbuf","","",25,null],[12,"vertex_args","","",25,null],[12,"out_ka","","",25,null],[12,"ka","","",25,null],[12,"kd","","",25,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",26,null],[12,"vertex_args","","",26,null],[12,"out_ka","","",26,null],[12,"ka","","",26,null],[12,"kd","","",26,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",25,null],[11,"fmt","","",25,null],[11,"link_to","","",26,null],[11,"bake_to","","",25,null],[6,"GFormat","amethyst_renderer::pass::forward","",null,null],[7,"VERTEX_SRC","","",null,null],[7,"FLAT_FRAGMENT_SRC","","",null,null],[7,"FRAGMENT_SRC","","",null,null],[7,"WIREFRAME_GEOMETRY_SRC","","",null,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"query","","",18,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"query","","",19,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"query","","",20,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"apply","","",27,null],[11,"new","","",28,{"inputs":[{"name":"f"}],"output":{"name":"drawflat"}}],[11,"apply","","",28,null],[11,"new","","",29,{"inputs":[{"name":"f"}],"output":{"name":"drawshaded"}}],[11,"apply","","",29,null],[11,"new","","",30,{"inputs":[{"name":"f"}],"output":{"name":"wireframe"}}],[11,"apply","","",30,null],[0,"deferred","amethyst_renderer::pass","",null,null],[3,"Vertex","amethyst_renderer::pass::deferred","",null,null],[12,"pos","","",31,null],[12,"tex_coord","","",31,null],[3,"Clear","","",null,null],[3,"PointLight","","",null,null],[12,"propagation","","",32,null],[12,"center","","",32,null],[12,"color","","",32,null],[3,"FragmentLightArgs","","",null,null],[12,"proj","","",33,null],[12,"inv_view_proj","","",33,null],[12,"viewport","","",33,null],[12,"light_count","","",33,null],[3,"VertexArgs","","",null,null],[12,"proj","","",34,null],[12,"view","","",34,null],[12,"model","","",34,null],[3,"FragmentArgs","","",null,null],[12,"ka","","",35,null],[12,"kd","","",35,null],[3,"DrawPass","","",null,null],[3,"DepthPass","","",null,null],[3,"BlitLayer","","",null,null],[3,"LightingPass","","",null,null],[0,"light","","",null,null],[3,"Data","amethyst_renderer::pass::deferred::light","",null,null],[12,"vbuf","","",36,null],[12,"kd","","",36,null],[12,"normal","","",36,null],[12,"depth","","",36,null],[12,"out","","",36,null],[12,"lights","","",36,null],[12,"fragment_args","","",36,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",37,null],[12,"kd","","",37,null],[12,"normal","","",37,null],[12,"depth","","",37,null],[12,"out","","",37,null],[12,"lights","","",37,null],[12,"fragment_args","","",37,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",36,null],[11,"fmt","","",36,null],[11,"link_to","","",37,null],[11,"bake_to","","",36,null],[0,"draw","amethyst_renderer::pass::deferred","",null,null],[3,"Data","amethyst_renderer::pass::deferred::draw","",null,null],[12,"ka","","",38,null],[12,"kd","","",38,null],[12,"vbuf","","",38,null],[12,"vertex_args","","",38,null],[12,"fragment_args","","",38,null],[12,"out_normal","","",38,null],[12,"out_ka","","",38,null],[12,"out_kd","","",38,null],[12,"out_depth","","",38,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"ka","","",39,null],[12,"kd","","",39,null],[12,"vbuf","","",39,null],[12,"vertex_args","","",39,null],[12,"fragment_args","","",39,null],[12,"out_normal","","",39,null],[12,"out_ka","","",39,null],[12,"out_kd","","",39,null],[12,"out_depth","","",39,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",38,null],[11,"fmt","","",38,null],[11,"link_to","","",39,null],[11,"bake_to","","",38,null],[0,"depth","amethyst_renderer::pass::deferred","",null,null],[3,"Data","amethyst_renderer::pass::deferred::depth","",null,null],[12,"vbuf","","",40,null],[12,"vertex_args","","",40,null],[12,"out_depth","","",40,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",41,null],[12,"vertex_args","","",41,null],[12,"out_depth","","",41,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"link_to","","",41,null],[11,"bake_to","","",40,null],[0,"blit","amethyst_renderer::pass::deferred","",null,null],[3,"Data","amethyst_renderer::pass::deferred::blit","",null,null],[12,"vbuf","","",42,null],[12,"source","","",42,null],[12,"out","","",42,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",43,null],[12,"source","","",43,null],[12,"out","","",43,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"link_to","","",43,null],[11,"bake_to","","",42,null],[6,"GFormat","amethyst_renderer::pass::deferred","",null,null],[7,"DRAW_VERTEX_SRC","","",null,null],[7,"DRAW_FRAGMENT_SRC","","",null,null],[7,"DEPTH_VERTEX_SRC","","",null,null],[7,"DEPTH_FRAGMENT_SRC","","",null,null],[7,"LIGHT_FRAGMENT_SRC","","",null,null],[7,"BLIT_VERTEX_SRC","","",null,null],[7,"BLIT_FRAGMENT_SRC","","",null,null],[11,"clone","","",31,null],[11,"fmt","","",31,null],[11,"query","","",31,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"apply","","",44,null],[11,"clone","","",32,null],[11,"fmt","","",32,null],[11,"query","","",32,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"query","","",33,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",34,null],[11,"fmt","","",34,null],[11,"query","","",34,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"query","","",35,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",45,{"inputs":[{"name":"f"}],"output":{"name":"drawpass"}}],[11,"apply","","",45,null],[11,"new","","",46,{"inputs":[{"name":"f"}],"output":{"name":"depthpass"}}],[11,"apply","","",46,null],[11,"new","","",47,{"inputs":[{"name":"f"}],"output":{"name":"blitlayer"}}],[11,"apply","","",47,null],[11,"new","","",48,{"inputs":[{"name":"f"}],"output":{"name":"lightingpass"}}],[11,"apply","","",48,null],[8,"Pass","amethyst_renderer::pass","A `Pass` is an implemnatnion of a Pass",null,null],[16,"Arg","","The argument required for the Pass",49,null],[16,"Target","","The render Target",49,null],[10,"apply","","encode the pass into the encoder using the supplied argument\nframe and render target",49,null],[8,"PassDescription","","Describes a render pass",null,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"new","","Create a new boxed Clear Description",11,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"new","","Create a boxed Description of the Writeframe",12,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"box"}}],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"new","","Create a Boxed DrawFlat",13,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"box"}}],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"new","","Create a Boxed DepthPass",14,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"box"}}],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"new","","Create a Boxed DrawShaded",15,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"box"}}],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"new","","Create a boxed BlitLayer",16,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"box"}}],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"new","","Box the Lighting Pass",17,{"inputs":[{"name":"a"},{"name":"b"},{"name":"c"}],"output":{"name":"box"}}],[11,"is","","Returns true if the boxed type is the same as `T`",50,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",50,null],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",50,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",50,null],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",50,null],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn&#39;t.",50,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",50,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","amethyst_renderer","",0,null],[11,"fmt","","",0,null],[11,"query","","",0,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","Create a new Render pipline",51,{"inputs":[{"name":"c"}],"output":{"name":"renderer"}}],[11,"load_all","","Load all known passes",51,null],[11,"add_pass","","Add a pass to the table of available passes",51,null],[11,"submit","","Execute all passes",51,null],[11,"clone","","",52,null],[11,"new","","Create a texture buffer",52,{"inputs":[{"name":"f"}],"output":{"name":"constantcolortexture"}}],[11,"clone","","",7,null],[11,"to_view","","",7,null],[11,"clone","","",2,null],[11,"new","","Create an empty scene",3,{"inputs":[],"output":{"name":"scene"}}],[11,"clone","","",4,null],[11,"new","","",4,null],[11,"perspective","","",4,null],[11,"orthographic","","",4,null],[11,"look_at","","",4,null],[11,"new","","Create a new pass with that will target the supplied\nTarget reference, The Layer will be initialized with the suppled\nlist of passes.",5,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"layer"}}],[11,"new","","Create an empty Frame",6,{"inputs":[],"output":{"name":"frame"}}]],"paths":[[3,"VertexPosNormal"],[3,"Fragment"],[3,"Light"],[3,"Scene"],[3,"Camera"],[3,"Layer"],[3,"Frame"],[4,"Texture"],[3,"ColorBuffer"],[3,"GeometryBuffer"],[8,"Target"],[3,"Clear"],[3,"Wireframe"],[3,"DrawFlat"],[3,"DepthPass"],[3,"DrawShaded"],[3,"BlitLayer"],[3,"Lighting"],[3,"PointLight"],[3,"VertexArgs"],[3,"FragmentArgs"],[3,"Data"],[3,"Init"],[3,"Data"],[3,"Init"],[3,"Data"],[3,"Init"],[3,"Clear"],[3,"DrawFlat"],[3,"DrawShaded"],[3,"Wireframe"],[3,"Vertex"],[3,"PointLight"],[3,"FragmentLightArgs"],[3,"VertexArgs"],[3,"FragmentArgs"],[3,"Data"],[3,"Init"],[3,"Data"],[3,"Init"],[3,"Data"],[3,"Init"],[3,"Data"],[3,"Init"],[3,"Clear"],[3,"DrawPass"],[3,"DepthPass"],[3,"BlitLayer"],[3,"LightingPass"],[8,"Pass"],[8,"PassDescription"],[3,"Renderer"],[3,"ConstantColorTexture"]]};
searchIndex["amethyst_ecs"] = {"doc":"","items":[[3,"Allocator","amethyst_ecs","Internally used structure for `Entity` allocation.",null,null],[3,"AntiStorage","","An inverted storage type, only useful to iterate entities\nthat do not have a particular component type.",null,null],[3,"CreateEntities","","Entity creation iterator. Will yield new empty entities infinitely.\nUseful for bulk entity construction, since the locks are only happening once.",null,null],[3,"Entities","","A custom entity guard used to hide the the fact that Generations\nis lazily created and updated. For this to be useful it _must_\nbe joined with a component. This is because the Generation table\nincludes every possible Generation of Entities even if they\nhave never been",null,null],[3,"Entity","","`Entity` type, as seen by the user.",null,null],[3,"EntityBuilder","","Helper builder for entities.",null,null],[3,"Generation","","Index generation. When a new entity is placed at an old index,\nit bumps the `Generation` by 1. This allows to avoid using components\nfrom the entities that were deleted.",null,null],[3,"HashMapStorage","","HashMap-based storage. Best suited for rare components.",null,null],[3,"JoinIter","","`JoinIter` is an Iterator over a group of `Storages`.",null,null],[3,"MaskedStorage","","The `UnprotectedStorage` together with the `BitSet` that knows\nabout which elements are stored, and which are not.",null,null],[3,"NullStorage","","A null storage type, used for cases where the component\ndoesn&#39;t contain any data and instead works as a simple flag.",null,null],[3,"Planner","","System execution planner. Allows running systems via closures,\ndistributes the load in parallel using a thread pool.",null,null],[12,"systems","","Permanent systems in the planner.",0,null],[3,"RunArg","","System closure run-time argument.",null,null],[3,"Storage","","A wrapper around the masked storage and the generations vector.\nCan be used for safe lookup of components, insertions and removes.\nThis is what `World::read/write` locks for the user.",null,null],[3,"SystemInfo","","System information package, where the system itself is accompanied\nby its name and priority.",null,null],[12,"name","","Name of the system. Can be used for lookups or debug output.",1,null],[12,"priority","","Priority of the system.",1,null],[12,"object","","System trait object itself.",1,null],[3,"VecStorage","","Vec-based storage, stores the generations of the data in\norder to match with given entities. Supposed to have maximum\nperformance for the components mostly present in entities.",null,null],[3,"World","","The `World` struct contains all the data, which is entities and their components.\nAll methods are supposed to be valid for any context they are available in.",null,null],[4,"InsertResult","","the status of an insert operation",null,null],[13,"Inserted","","The value was inserted and there was no value before",2,null],[13,"Updated","","The value was updated an already inserted value\nthe value returned is the old value",2,null],[13,"EntityIsDead","","The value failed to insert because the entity\nwas invalid",2,null],[8,"Component","","Abstract component type. Doesn&#39;t have to be Copy or even Clone.",null,null],[16,"Storage","","Associated storage type for this component.",3,null],[8,"Join","","The purpose of the `Join` trait is to provide a way\nto access multiple storages at the same time with\nthe merged bit set.",null,null],[16,"Type","","Type of joined components.",4,null],[16,"Value","","Type of joined storages.",4,null],[16,"Mask","","Type of joined bit mask.",4,null],[11,"iter","","Create a joined iterator over the contents.",4,null],[10,"open","","Open this join by returning the mask and the storages.",4,null],[10,"get","","Get a joined component value by a gien index.",4,null],[8,"Processor","","Generic system that runs through the entities and do something\nwith their components, with an ability to add new entities and\ndelete existing ones.",null,null],[10,"run","","Run the system, given its context.",5,null],[8,"UnprotectedStorage","","Used by the framework to quickly join componets",null,null],[10,"new","","Creates a new `Storage&lt;T&gt;`. This is called when you register a new\ncomponent type within the world.",6,{"inputs":[],"output":{"name":"self"}}],[10,"clean","","Clean the storage given a check to figure out if an index\nis valid or not. Allows us to safely drop the storage.",6,null],[10,"get","","Tries reading the data associated with an `Index`.\nThis is unsafe because the external set used\nto protect this storage is absent.",6,null],[10,"get_mut","","Tries mutating the data associated with an `Index`.\nThis is unsafe because the external set used\nto protect this storage is absent.",6,null],[10,"insert","","Inserts new data for a given `Index`.",6,null],[10,"remove","","Removes the data associated with an `Index`.",6,null],[6,"Priority","","System scheduling priority. Higehr priority systems are started\nearlier than lower-priority ones.",null,null],[3,"Simulation","","",null,null],[3,"SimBuilder","","Consuming builder for easily constructing a new simulations.",null,null],[11,"new","","Creates an empty simulation.",7,{"inputs":[{"name":"world"},{"name":"usize"}],"output":{"name":"simulation"}}],[11,"build","","Creates an initialized simulation using the [builder pattern][bp].",7,{"inputs":[{"name":"world"},{"name":"usize"}],"output":{"name":"simbuilder"}}],[11,"add_processor","","Adds a new processor to the simulation.",7,null],[11,"mut_world","","Get a mutable reference to the world.",7,null],[11,"step","","Computes the next state of the world using the given processors.",7,null],[11,"drop","","",7,null],[11,"new","","Starts building a new simulation.",8,{"inputs":[{"name":"world"},{"name":"usize"}],"output":{"name":"simbuilder"}}],[11,"with","","Add a given processor to the simulation.",8,null],[11,"done","","Returns the newly-built simulation or a list of any errors the\nprocessors may have encountered.",8,null],[11,"is_alive","","Return `true` if the entity is alive.",9,null],[11,"open","","",10,null],[11,"get","","",10,null],[11,"cmp","","",11,null],[11,"cmp","","",12,null],[11,"new","","",13,{"inputs":[],"output":{"name":"hashmapstorage"}}],[11,"clean","","",13,null],[11,"get","","",13,null],[11,"get_mut","","",13,null],[11,"insert","","",13,null],[11,"remove","","",13,null],[11,"new","","",14,{"inputs":[],"output":{"name":"vecstorage"}}],[11,"clean","","",14,null],[11,"get","","",14,null],[11,"get_mut","","",14,null],[11,"insert","","",14,null],[11,"remove","","",14,null],[11,"new","","",15,{"inputs":[],"output":{"name":"nullstorage"}}],[11,"clean","","",15,null],[11,"get","","",15,null],[11,"get_mut","","",15,null],[11,"insert","","",15,null],[11,"remove","","",15,null],[11,"hash","","",11,null],[11,"hash","","",12,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"partial_cmp","","",11,null],[11,"lt","","",11,null],[11,"le","","",11,null],[11,"gt","","",11,null],[11,"ge","","",11,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"fmt","","",11,null],[11,"fmt","","",12,null],[11,"drop","","",16,null],[11,"next","","",17,null],[11,"next","","",18,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"get_id","","Returns the index of the `Entity`.",12,null],[11,"get_gen","","Returns the `Generation` of the `Entity`.",12,null],[11,"with","","Adds a `Component` value to the new `Entity`.",19,null],[11,"build","","Finishes entity construction.",19,null],[11,"is_alive","","Returns `true` if entities of this `Generation` are alive.",11,null],[11,"new","","Create a new join iterator.",18,{"inputs":[{"name":"j"}],"output":{"name":"joiniter"}}],[11,"new","","Creates a new `MaskedStorage`. This is called when you register\na new component type within the world.",16,{"inputs":[],"output":{"name":"maskedstorage"}}],[11,"clear","","Clear the contents of this storage.",16,null],[11,"remove","","Remove an element by a given index.",16,null],[11,"new","","Creates a new planner, given the world and the thread count.",0,{"inputs":[{"name":"world"},{"name":"usize"}],"output":{"name":"planner"}}],[11,"add_system","","Add a system to the dispatched list.",0,null],[11,"run_custom","","Runs a custom system.",0,null],[11,"mut_world","","Waits for all currently executing systems to finish, and then\nreturns the mutable borrow of the world, allowing to create\nentities instantly.",0,null],[11,"wait","","Waits for all currently executing systems to finish, and then\nmerges all queued changes.",0,null],[11,"dispatch","","Dispatch all systems according to their associated priorities.",0,null],[11,"run0w1r","","",0,null],[11,"run0w2r","","",0,null],[11,"run0w3r","","",0,null],[11,"run0w4r","","",0,null],[11,"run1w0r","","",0,null],[11,"run1w1r","","",0,null],[11,"run1w2r","","",0,null],[11,"run1w3r","","",0,null],[11,"run1w4r","","",0,null],[11,"run1w5r","","",0,null],[11,"run1w6r","","",0,null],[11,"run1w7r","","",0,null],[11,"run2w0r","","",0,null],[11,"run2w1r","","",0,null],[11,"run2w2r","","",0,null],[11,"fetch","","Borrows the world, allowing the system to lock some components and get the entity\niterator. Must be called only once.",20,null],[11,"fetch_new","","Borrows the world, allowing the system to lock some components and get the entity\niterator. As an alternative to `fetch()`, it must be called only once.\nIt allows creating a number of entities instantly, returned in a vector.",20,null],[11,"create","","Creates a new entity dynamically.",20,null],[11,"delete","","Deletes an entity dynamically.",20,null],[11,"new","","Create a new `Storage`",21,{"inputs":[{"name":"a"},{"name":"d"}],"output":{"name":"storage"}}],[11,"get","","Tries to read the data associated with an `Entity`.",21,null],[11,"get_mut","","Tries to mutate the data associated with an `Entity`.",21,null],[11,"insert","","Inserts new data for a given `Entity`.\nReturns the result of the operation as a `InsertResult&lt;T&gt;`",21,null],[11,"remove","","Removes the data associated with an `Entity`.",21,null],[11,"clear","","Clears the contents of the storage.",21,null],[11,"new","","Creates a new empty `World`.",22,{"inputs":[],"output":{"name":"world"}}],[11,"register","","Registers a new component type.",22,null],[11,"unregister","","Unregisters a component type.",22,null],[11,"read","","Locks a component&#39;s storage for reading.",22,null],[11,"write","","Locks a component&#39;s storage for writing.",22,null],[11,"entities","","Returns the entity iterator.",22,null],[11,"create_iter","","Returns the entity creation iterator. Can be used to create many\nempty entities at once without paying the locking overhead.",22,null],[11,"create_now","","Creates a new entity instantly, locking the generations data.",22,null],[11,"delete_now","","Deletes a new entity instantly, locking the generations data.",22,null],[11,"create_later","","Creates a new entity dynamically.",22,null],[11,"delete_later","","Deletes an entity dynamically.",22,null],[11,"is_alive","","Returns `true` if the given `Entity` is alive.",22,null],[11,"maintain","","Merges in the appendix, recording all the dynamically created\nand deleted entities into the persistent generations vector.\nAlso removes all the abandoned components.",22,null],[11,"add_resource","","add a new resource to the world",22,null],[11,"has_resource","","check to see if a resource is present",22,null],[11,"read_resource","","get read-only access to an resource",22,null],[11,"write_resource","","get read-write access to a resource",22,null]],"paths":[[3,"Planner"],[3,"SystemInfo"],[4,"InsertResult"],[8,"Component"],[8,"Join"],[8,"Processor"],[8,"UnprotectedStorage"],[3,"Simulation"],[3,"SimBuilder"],[3,"Allocator"],[3,"AntiStorage"],[3,"Generation"],[3,"Entity"],[3,"HashMapStorage"],[3,"VecStorage"],[3,"NullStorage"],[3,"MaskedStorage"],[3,"CreateEntities"],[3,"JoinIter"],[3,"EntityBuilder"],[3,"RunArg"],[3,"Storage"],[3,"World"]]};
initSearch(searchIndex);
